#+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el

* Basic UI Configuration

  #+begin_src emacs-lisp

    ;; Remove unnecessary defaults
    (setq inhibit-startup-message t)
    (menu-bar-mode -1) ; Disable menu bar
    (setq visible-bell t)
    (when (display-graphic-p)
      (scroll-bar-mode -1)
      (tool-bar-mode -1)
      (tooltip-mode -1)
      (set-fringe-mode 10))

  #+end_src

  
* Package System Setup

  #+begin_src emacs-lisp
    ;; Initialise package sources
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; -p predicate
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)
  #+end_src

* Ivy

  #+begin_src emacs-lisp
    ;; Ivy for completions
    (use-package ivy
    ;; enable to hide  :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     :map ivy-switch-buffer-map
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :init
      (ivy-mode 1))

    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :config
      (setq doom-modeline-height 35))

    (use-package doom-themes
      :config
      (load-theme 'doom-solarized-light t))

    (use-package all-the-icons)

    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))

    (use-package which-key
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.3))

    (use-package ivy-rich
      :init
      (ivy-rich-mode 1))

    (use-package counsel
      :bind (("M-x" . counsel-M-x)
	     ("C-x b" . counsel-ibuffer)
	     ("C-x C-f" . counsel-find-file)
	     :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history))
      :config
      (setq ivy-initial-inputs-alist nil))
  #+end_src

* Smart Parens
  
  #+begin_src emacs-lisp
    (use-package smartparens
      :hook (prog-mode . smartparens-strict-mode)
      :bind (("C-<right>" . sp-forward-slurp-sexp)
	     ("C-<left>" . sp-forward-barf-sexp))
      :config (require 'smartparens-config))
  #+end_src

* Org Mode

** Configure Babel Languages

  #+begin_src emacs-lisp

    (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
	 (python . t)))

    (setq org-confirm-babel-evaluate nil)

  #+end_src

** Auto-tangle Config Files

   #+begin_src emacs-lisp
     (defun my/org-babel-tangle-config ()
       (when (string-equal (buffer-file-name)
			   (expand-file-name "~/.emacs.d/Emacs.org"))
	 ;; Scopes value of symbol just to function call
	 (let ((org-confirm-babel-evaulate nil))
	   (org-babel-tangle))))

     ; can this be done with require?
     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
   #+end_src


